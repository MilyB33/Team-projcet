// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Sqlite doesn't support enum
model AccountType {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

model User {
  id         Int         @id @default(autoincrement())
  first_name String
  last_name  String
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  company    String?
  type       AccountType @relation(fields: [typeId], references: [id])
  typeId     Int

  workspaces   Workspace[]
  own_projects Project[]
  projects     ProjectUser[]
  time_entries TimeEntry[]
}

model Workspace {
  id         Int       @id @default(autoincrement())
  name       String
  created_by Int
  createdAt  DateTime  @default(now())
  projects   Project[]
  admin      User      @relation(fields: [created_by], references: [id])
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  workspaceId  Int
  createdBy    Int
  accessCode   String        @unique
  createdAt    DateTime      @default(now())
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  admin        User          @relation(fields: [createdBy], references: [id])
  members      ProjectUser[]
  groups       Group[]
  time_entries TimeEntry[]
}

model ProjectUser {
  id        Int                @id @default(autoincrement())
  projectId Int
  userId    Int
  joinedAt  DateTime           @default(now())
  project   Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id])
  groups    ProjectUserGroup[]

  @@unique([projectId, userId])
}

model Group {
  id        Int                @id @default(autoincrement())
  name      String
  projectId Int
  project   Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  members   ProjectUserGroup[]
}

model ProjectUserGroup {
  id            Int         @id @default(autoincrement())
  projectUserId Int
  groupId       Int
  joinedAt      DateTime    @default(now())
  projectUser   ProjectUser @relation(fields: [projectUserId], references: [id], onDelete: Cascade)
  group         Group       @relation(fields: [groupId], references: [id])
}

model TimeEntry {
  id          Int      @id @default(autoincrement())
  userId      Int
  projectId   Int
  description String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
}
